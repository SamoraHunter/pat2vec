import ast
import os
import sys
import textwrap
from collections import defaultdict

# To update init with methods in pat2vec root dir,
# The script now writes the file directly. Just run: `python generate_init.py`


def generate_init_file_content(package_path="pat2vec"):
    """
    Walks a package to find all public, top-level functions and classes
    and generates the content for the __init__.py file.
    """
    # This will store all importable names (functions and classes) per module.
    module_to_imports = defaultdict(list)
    all_import_names = set()

    for root, _, files in os.walk(package_path):
        for file_name in files:
            if file_name.endswith(".py") and file_name != "__init__.py":
                file_path = os.path.join(root, file_name)

                relative_path = os.path.relpath(file_path, package_path)
                module_path, _ = os.path.splitext(relative_path)
                import_path = "." + module_path.replace(os.path.sep, ".")

                with open(file_path, "r", encoding="utf-8") as f:
                    try:
                        tree = ast.parse(f.read(), filename=file_path)

                        # Instead of ast.walk(), iterate over top-level nodes only.
                        # This finds functions and classes but ignores methods inside classes.
                        for node in tree.body:
                            # Check for top-level functions
                            if isinstance(node, ast.FunctionDef):
                                if not node.name.startswith("_"):
                                    name = node.name
                                    module_to_imports[import_path].append(name)
                                    all_import_names.add(name)
                            # Check for top-level classes
                            elif isinstance(node, ast.ClassDef):
                                if not node.name.startswith("_"):
                                    name = node.name
                                    module_to_imports[import_path].append(name)
                                    all_import_names.add(name)

                    except SyntaxError as e:
                        print(f"Skipping {file_path} due to syntax error: {e}")

    # --- THE REST OF THE SCRIPT BUILDS THE FILE CONTENT ---
    output_lines = [
        '"""',
        "pat2vec: A package for processing patient data.",
        "",
        "This file is auto-generated by `generate_init.py`.",
        "It exposes the main functions and methods of the pat2vec library for easy access.",
        '"""',
        "",
    ]

    for module, imports in sorted(module_to_imports.items()):
        if imports:
            sorted_imports = sorted(imports)
            import_line = f"from {module} import ("

            wrapper = textwrap.TextWrapper(
                width=88, initial_indent="    ", subsequent_indent="    "
            )
            wrapped_imports = wrapper.fill(", ".join(sorted_imports))

            output_lines.append(import_line)
            output_lines.append(wrapped_imports)
            output_lines.append(")")

    output_lines.append("\n")
    output_lines.append("# Define the public API of the package")

    all_list_str = '", "'.join(sorted(list(all_import_names)))

    wrapper = textwrap.TextWrapper(
        width=88, initial_indent="    ", subsequent_indent="    "
    )
    wrapped_all = wrapper.fill(f'"{all_list_str}"')

    output_lines.append("__all__ = [")
    output_lines.append(wrapped_all)
    output_lines.append("]")

    return "\n".join(output_lines)


if __name__ == "__main__":
    init_content = generate_init_file_content()
    output_path = os.path.join("pat2vec", "__init__.py")

    print(f"Writing __init__.py to {output_path}...")
    try:
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(init_content)
        print("Done.")
    except IOError as e:
        print(f"Error writing to file: {e}", file=sys.stderr)
