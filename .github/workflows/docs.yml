# This workflow builds and deploys the Sphinx documentation to GitHub Pages.

name: Build and Deploy Docs

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Proxy for Corporate Network (Local Runner Only)
        if: ${{ env.ACT }}
        run: |
          if ping -c 1 dh-cap02 &> /dev/null; then
            echo "âœ… Proxy server 'dh-cap02' is available. Configuring environment variables."
            echo "http_proxy=http://dh-cap02:8008" >> $GITHUB_ENV
            echo "https_proxy=http://dh-cap02:8008" >> $GITHUB_ENV
            echo "NO_PROXY=localhost,127.0.0.1,kch-cap.kingsch.nhs.uk" >> $GITHUB_ENV
          fi

      - name: Install System Dependencies (for local act runner)
        if: ${{ env.ACT }}
        run: |
          apt-get update
          apt-get install -y --no-install-recommends sudo nodejs npm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project with the 'dev' extras which include Sphinx
          pip install -e .[dev]

      - name: Build Sphinx documentation
        run: |
          python -m sphinx.cmd.build -b html docs/source docs/build/html

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire directory
          path: 'docs/build/html'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # The deploy job depends on a successful build
    steps:
      # This is the standard step for deploying a Pages artifact.
      # It automatically downloads the artifact uploaded in the 'build' job.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      # The download-artifact step is not needed here because deploy-pages handles it.
