name: Notebook Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DEBIAN_FRONTEND: noninteractive
      PYTHON_VERSION: '3.10'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Detect Runner Environment
        id: detect_env
        run: |
          if [ -f "/usr/local/share/ca-certificates/kch_certauth.crt" ]; then
            echo "is_act_runner=true" >> $GITHUB_OUTPUT
          fi

      - name: Perform Local Runner Setup
        id: local_setup
        if: steps.detect_env.outputs.is_act_runner == 'true'
        uses: ./.github/actions/local-setup
        with:
          gitea-token: ${{ secrets.GITEA_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        env:
          http_proxy: ${{ env.http_proxy }}
          https_proxy: ${{ env.https_proxy }}
          # Tell setup-python where to find the pre-installed tools for local 'act' runs
          AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
        with:
          python-version: '3.10.18'
          check-latest: false

      - name: Get pip cache directory
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        if: steps.detect_env.outputs.is_act_runner != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          if [[ "${{ steps.detect_env.outputs.is_act_runner }}" == "true" ]]; then
              echo "ðŸ”§ Running in act - removing hash requirements"
              find . -name "requirements*.txt" -type f -exec sed -i 's/ --hash=sha256:[a-f0-9]*//g' {} \;
          fi

          pip_install_args=()
          if [[ -n "${http_proxy:-}" ]]; then
              echo "ðŸ”§ Using proxy: ${http_proxy}"
              pip_install_args+=("--proxy" "${http_proxy}")
          fi

          echo "Installing with: python3 -m pip install ${pip_install_args[*]} -e .[dev]"
          python3 -m pip install "${pip_install_args[@]}" -e ".[dev]"
          python3 -m ipykernel install --user --name=pat2vec_env --display-name "Python (pat2vec_env)"
          jupyter kernelspec list

      - name: List installed packages
        run: |
          which python3
          python3 --version
          python3 -m pip list

      - name: Run notebook test
        run: |
          pytest --nbmake --nbmake-timeout=1200 --exitfirst notebooks/test_notebook.py

      - name: Clean up Jupyter kernels
        if: always()
        run: |
          pkill -f ipykernel || true
          pkill -f jupyter || true

      - name: Clean Up Generated Files for Local Act Runner
        if: steps.detect_env.outputs.is_act_runner == 'true' && always()
        run: |
          echo "INFO: Cleaning up directories created during the test run..."
          rm -rf notebooks/new_project
          rm -rf notebooks/new_project_ipw
          rm -rf notebooks/treatment_doc_extract
