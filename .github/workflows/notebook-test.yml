name: Notebook Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DEBIAN_FRONTEND: noninteractive
      PYTHON_VERSION: '3.10'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure Proxy for Corporate Network (Local Runner Only)
        if: ${{ env.ACT }}
        run: |
          if ping -c 1 dh-cap02 &> /dev/null; then
            echo "✅ Proxy server 'dh-cap02' is available. Configuring environment variables."
            echo "http_proxy=http://dh-cap02:8008" >> $GITHUB_ENV
            echo "https_proxy=http://dh-cap02:8008" >> $GITHUB_ENV

            NO_PROXY_LIST="localhost,127.0.0.1,kch-cap.kingsch.nhs.uk,${ACTIONS_CACHE_URL#http://}"
            echo "NO_PROXY=$NO_PROXY_LIST" >> $GITHUB_ENV
          fi

      - name: Install System Dependencies and Python ${{ env.PYTHON_VERSION }}
        run: |
          apt-get update
          ln -fs /usr/share/zoneinfo/Europe/London /etc/localtime
          apt-get install -y --no-install-recommends \
            sudo \
            tzdata \
            iputils-ping \
            ca-certificates \
            lsb-release \
            software-properties-common \
            gnupg \
            nodejs \
            npm

          # Add the deadsnakes PPA to get specific Python versions
          sudo gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys F23C5A6CF475977595C89F51BA6932366A755776
          sudo gpg --export F23C5A6CF475977595C89F51BA6932366A755776 | sudo gpg --dearmor -o /usr/share/keyrings/deadsnakes-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/deadsnakes-archive-keyring.gpg] http://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/deadsnakes-ppa.list

          sudo apt-get update
          sudo apt-get install -y python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-venv python${{ env.PYTHON_VERSION }}-distutils python3-pip

      - name: Trust Corporate Certificate (Local Runner Only)
        if: ${{ env.ACT }}
        run: |
          CERT_PATH="/usr/local/share/ca-certificates/kch_oct_2024_root.crt"
          if [ -f "$CERT_PATH" ]; then
            echo "✅ Corporate certificate found. Updating system trust store..."
            sudo update-ca-certificates
          else
            echo "⚠️ Corporate certificate not found. Proceeding without it."
          fi

          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${{ env.PYTHON_VERSION }} 1
          python3 --version

          echo "SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
          echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV

      - name: Get pip cache directory
        id: pip-cache
        run: |
          echo "dir=$(python3 -m pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        # Conditionally disable caching when running with act to diagnose hanging issues.
        # The 'actions/cache' action's post-job hook (for saving) might be causing the hang.
        if: ${{ !env.ACT }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          # For local act runner, temporarily remove hash requirements
          if [[ "${ACT:-false}" != "false" ]]; then
              echo "🔧 Running in act - removing hash requirements for local mirror compatibility"
              # Remove hashes from any requirements files
              find . -name "requirements*.txt" -type f -exec sed -i 's/ --hash=sha256:[a-f0-9]*//g' {} \;
          fi

          # Build pip install arguments
          pip_install_args=()

          # Check if proxy is configured and add it
          if [[ -n "${http_proxy:-}" ]]; then
              echo "🔧 Using proxy: ${http_proxy}"
              pip_install_args+=("--proxy" "${http_proxy}")
          fi

          echo "Installing with: python3 -m pip install ${pip_install_args[*]} -e .[dev]"
          python3 -m pip install "${pip_install_args[@]}" -e ".[dev]"
          python3 -m ipykernel install --user --name=pat2vec_env --display-name "Python (pat2vec_env)"
          jupyter kernelspec list

      - name: List installed packages
        run: |
          which python3
          python3 --version
          pip list

      - name: Run notebook test
        run: |
          pytest --nbmake --nbmake-timeout=1200 --exitfirst notebooks/test_notebook.py

      - name: Clean up Jupyter kernels
        if: always()
        run: |
          # Kill any remaining Jupyter kernel processes
          pkill -f ipykernel || true
          pkill -f jupyter || true
          exit 0

      - name: Clean Up Generated Files for Local Act Runner
        if: ${{ env.ACT && always() }}
        run: |
          echo "INFO: Cleaning up directories created during the test run..."

          rm -rf notebooks/new_project
          rm -rf notebooks/new_project_ipw
          rm -rf notebooks/treatment_doc_extract
          exit 0
